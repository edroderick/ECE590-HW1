/* Standard Stuff */
#include <string.h>
#include <stdio.h>
#include <time.h>

/* Required Hubo Headers */
#include <hubo.h>

/* For Ach IPC */
#include <errno.h>
#include <fcntl.h>
#include <assert.h>
#include <unistd.h>
#include <pthread.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>
#include <inttypes.h>
#include "ach.h"


/* Ach Channel IDs */
ach_channel_t chan_hubo_ref;      // Feed-Forward (Reference)
ach_channel_t chan_hubo_state;    // Feed-Back (State)

int main(int argc, char **argv) {

	/* Open Ach Channel */
	int r = ach_open(&chan_hubo_ref, HUBO_CHAN_REF_NAME , NULL);
	assert( ACH_OK == r );

	r = ach_open(&chan_hubo_state, HUBO_CHAN_STATE_NAME , NULL);
	assert( ACH_OK == r );

	/* Create initial structures to read and write from */
	struct hubo_ref H_ref;
	struct hubo_state H_state;
	memset( &H_ref,   0, sizeof(H_ref));
	memset( &H_state, 0, sizeof(H_state));

	/* for size check */
	size_t fs;

	/* Set the starting position*/
	H_ref.ref[LSP] = -1*M_PI_2;
	H_ref.ref[LSR] = 1.25;
	H_ref.ref[LEB] = -.75;
	ach_put( &chan_hubo_ref, &H_ref, sizeof(H_ref));
	usleep(3000000);
	int armstate = 0;
	clock_t tstart;


	while(true){
		/* Get the current feed-forward (state) */
		r = ach_get( &chan_hubo_state, &H_state, sizeof(H_state), &fs, NULL, ACH_O_LAST );
		if(ACH_OK != r) {
			assert( sizeof(H_state) == fs );
		}

		if(0==armstate){
			tstart = clock();
			H_ref.ref[LEB] = -2.85;
			ach_put( &chan_hubo_ref, &H_ref, sizeof(H_ref));
			armstate = 1;
			usleep(500000-clock()-tstart);
		}

		if(1==armstate){
			tstart = clock();
			H_ref.ref[LEB]=-.25;
			ach_put( &chan_hubo_ref, &H_ref, sizeof(H_ref));
			armstate = 0;
			usleep(500000-clock()-tstart);
		}
	}
}

